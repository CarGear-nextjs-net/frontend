"use client";
import {
  getDashboardOrderRecentData,
  getDashboardOverviewData,
  getDashboardTopProductData,
} from "@/lib/apis/dashboard-api";
import {
  BarElement,
  CategoryScale,
  Chart as ChartJS,
  Legend,
  LinearScale,
  Title,
  Tooltip,
} from "chart.js";
import Image from "next/image";
import { useEffect, useState } from "react";
import { Bar } from "react-chartjs-2";

ChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);

export default function Dashboard() {
  // D·ªØ li·ªáu m·∫´u, c√≥ th·ªÉ thay b·∫±ng API th·ª±c t·∫ø
  const [stats, setStats] = useState({
    orders: 0,
    customers: 0,
    revenue: 0,
    products: 0,
  });
  const [recentOrders, setRecentOrders] = useState([]);
  const [topProducts, setTopProducts] = useState([]);

  // D·ªØ li·ªáu m·∫´u cho doanh thu t·ª´ng th√°ng
  const [year, setYear] = useState(2024);
  const years = [2022, 2023, 2024];
  const monthlyRevenue = {
    2022: [
      12000000, 15000000, 18000000, 20000000, 17000000, 21000000, 22000000, 25000000, 23000000,
      24000000, 26000000, 27000000,
    ],
    2023: [
      14000000, 16000000, 19000000, 21000000, 18000000, 22000000, 23000000, 26000000, 24000000,
      25000000, 27000000, 28000000,
    ],
    2024: [
      15000000, 17000000, 20000000, 22000000, 19000000, 23000000, 24000000, 27000000, 25000000,
      26000000, 28000000, 29000000,
    ],
  };

  // D·ªØ li·ªáu m·∫´u top 5 s·∫£n ph·∫©m b√°n ch·∫°y

  useEffect(() => {
    async function fetchData() {
      // G·ªçi API l·∫•y d·ªØ li·ªáu dashboard ·ªü ƒë√¢y
      const res = await getDashboardOverviewData();
      if (res.status === 200) {
        setStats({
          orders: res.data.totalOrders,
          customers: res.data.totalUsers,
          revenue: res.data.totalRevenue,
          products: res.data.totalProduct,
        });
      }
    }
    fetchData();
  }, []);

  useEffect(() => {
    async function fetchData() {
      const res = await getDashboardOrderRecentData({
        limit: 7,
      });
      if (res.status === 200) {
        setRecentOrders(res.data);
      }
    }
    fetchData();
  }, []);

  useEffect(() => {
    async function fetchData() {
      const res = await getDashboardTopProductData({
        limit: 5,
      });
      if (res.status === 200) {
        setTopProducts(res.data);
      }
    }
    fetchData();
  }, []);

  const barData = {
    labels: [
      "Th√°ng 1",
      "Th√°ng 2",
      "Th√°ng 3",
      "Th√°ng 4",
      "Th√°ng 5",
      "Th√°ng 6",
      "Th√°ng 7",
      "Th√°ng 8",
      "Th√°ng 9",
      "Th√°ng 10",
      "Th√°ng 11",
      "Th√°ng 12",
    ],
    datasets: [
      {
        label: `Doanh thu nƒÉm ${year}`,
        data: monthlyRevenue[year],
        backgroundColor: "rgba(255, 99, 132, 0.5)",
      },
    ],
  };

  const statusLabel = {
    0: "ƒêang x·ª≠ l√Ω",
    1: "ƒê√£ giao",
    2: "ƒê√£ h·ªßy",
  };
  const statusColor = {
    0: "bg-yellow-500",
    1: "bg-green-500",
    2: "bg-red-500",
  };

  const barOptions = {
    responsive: true,
    plugins: {
      legend: { position: "top" },
      title: { display: true, text: `Bi·ªÉu ƒë·ªì doanh thu theo th√°ng (${year})` },
    },
    scales: {
      y: {
        beginAtZero: true,
        ticks: {
          callback: function (value) {
            return value.toLocaleString("vi-VN") + " ƒë";
          },
        },
      },
    },
  };

  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold mb-6">Dashboard Qu·∫£n l√Ω</h1>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        <Widget title="ƒê∆°n h√†ng" value={stats.orders} icon="üì¶" />
        <Widget title="Kh√°ch h√†ng" value={stats.customers} icon="üë§" />
        <Widget title="Doanh thu" value={stats.revenue.toLocaleString()} icon="üí∞" />
        <Widget title="S·∫£n ph·∫©m" value={stats.products} icon="üõí" />
      </div>
      <div className="bg-white rounded shadow p-4 my-1">
        <h2 className="text-lg font-semibold mb-2">Ch√†o m·ª´ng b·∫°n ƒë·∫øn trang qu·∫£n l√Ω!</h2>
        <p className="text-gray-600">
          B·∫°n c√≥ th·ªÉ theo d√µi c√°c ch·ªâ s·ªë t·ªïng quan, qu·∫£n l√Ω ƒë∆°n h√†ng, kh√°ch h√†ng, s·∫£n ph·∫©m v√† nhi·ªÅu
          h∆°n n·ªØa.
        </p>
      </div>
      <div className="bg-white rounded shadow p-4 mb-8">
        <div className="flex items-center mb-4 gap-2">
          <h2 className="text-lg font-semibold flex-1">Bi·ªÉu ƒë·ªì doanh thu h√†ng th√°ng</h2>
          <select
            className="border rounded px-2 py-1"
            value={year}
            onChange={(e) => setYear(Number(e.target.value))}
          >
            {years.map((y) => (
              <option key={y} value={y}>
                {y}
              </option>
            ))}
          </select>
        </div>
        <Bar data={barData} options={barOptions} height={80} />
      </div>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
        {/* Top 5 s·∫£n ph·∫©m b√°n ch·∫°y */}
        {topProducts.length > 0 && (
          <div className="bg-white rounded shadow p-4">
            <h2 className="text-lg font-semibold mb-4">Top 5 s·∫£n ph·∫©m b√°n ch·∫°y</h2>
            <table className="w-full text-sm">
              <thead>
                <tr className="text-left border-b">
                  <th className="py-2">#</th>
                  <th className="py-2">S·∫£n ph·∫©m</th>
                  <th className="py-2">S·ªë l∆∞·ª£ng b√°n</th>
                </tr>
              </thead>
              <tbody>
                {topProducts.map((p, idx) => (
                  <tr key={p.productId} className="border-b last:border-0">
                    <td className="py-2">{idx + 1}</td>
                    <td className="py-2 flex items-center gap-2">
                      <Image
                        src={p.imageUrl || "/placeholder.svg"}
                        alt={p.productName}
                        className="w-8 h-8 rounded object-cover"
                        width={32}
                        height={32}
                      />
                      <span>{p.productName}</span>
                    </td>
                    <td className="py-2">{p.totalSold}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
        {/* ƒê∆°n h√†ng g·∫ßn nh·∫•t */}
        {recentOrders.length > 0 && (
          <div className="bg-white rounded shadow p-4">
            <h2 className="text-lg font-semibold mb-4">ƒê∆°n h√†ng g·∫ßn nh·∫•t</h2>
            <table className="w-full text-sm">
              <thead>
                <tr className="text-left border-b">
                  <th className="py-2">M√£ ƒë∆°n</th>
                  <th className="py-2">Kh√°ch h√†ng</th>
                  <th className="py-2">Ng√†y</th>
                  <th className="py-2">T·ªïng ti·ªÅn</th>
                  <th className="py-2">Tr·∫°ng th√°i</th>
                </tr>
              </thead>
              <tbody>
                {recentOrders.map((order) => (
                  <tr key={order.orderId} className="border-b last:border-0">
                    <td className="py-2 font-medium">OD-{order.orderId}</td>
                    <td className="py-2">{order.customerName}</td>
                    <td className="py-2">{order.orderDate.split("T")[0]}</td>
                    <td className="py-2">{order.totalAmount.toLocaleString()}ƒë</td>
                    <td className="py-2">
                      <span
                        className={`px-2 py-1 rounded-full text-white text-xs ${statusColor[order.status]}`}
                      >
                        {statusLabel[order.status]}
                      </span>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </div>
    </div>
  );
}

function Widget({ title, value, icon }) {
  return (
    <div className="bg-white rounded shadow p-4 flex flex-col items-center justify-center">
      <div className="text-3xl mb-2">{icon}</div>
      <div className="text-xl font-bold">{value}</div>
      <div className="text-gray-500 text-sm">{title}</div>
    </div>
  );
}
